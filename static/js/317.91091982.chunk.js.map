{"version":3,"file":"static/js/317.91091982.chunk.js","mappings":"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","sources":["../node_modules/mermaid/node_modules/mdast-util-to-string/lib/index.js","../node_modules/mermaid/node_modules/micromark-util-chunked/index.js","../node_modules/mermaid/node_modules/micromark-util-combine-extensions/index.js","../node_modules/mermaid/node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../node_modules/mermaid/node_modules/micromark-util-character/index.js","../node_modules/mermaid/node_modules/micromark-factory-space/index.js","../node_modules/mermaid/node_modules/micromark/lib/initialize/content.js","../node_modules/mermaid/node_modules/micromark/lib/initialize/document.js","../node_modules/mermaid/node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/mermaid/node_modules/micromark-core-commonmark/lib/content.js","../node_modules/mermaid/node_modules/micromark/lib/initialize/flow.js","../node_modules/mermaid/node_modules/micromark/lib/initialize/text.js","../node_modules/mermaid/node_modules/micromark-util-resolve-all/index.js","../node_modules/mermaid/node_modules/micromark/lib/create-tokenizer.js","../node_modules/mermaid/node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/mermaid/node_modules/micromark-core-commonmark/lib/list.js","../node_modules/mermaid/node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/mermaid/node_modules/micromark-factory-destination/index.js","../node_modules/mermaid/node_modules/micromark-factory-label/index.js","../node_modules/mermaid/node_modules/micromark-factory-title/index.js","../node_modules/mermaid/node_modules/micromark-factory-whitespace/index.js","../node_modules/mermaid/node_modules/micromark-util-normalize-identifier/index.js","../node_modules/mermaid/node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/mermaid/node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/mermaid/node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/mermaid/node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/mermaid/node_modules/micromark-util-html-tag-name/index.js","../node_modules/mermaid/node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/mermaid/node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/mermaid/node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/mermaid/node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/mermaid/node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/mermaid/node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/mermaid/node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/mermaid/node_modules/micromark-util-classify-character/index.js","../node_modules/mermaid/node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/mermaid/node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/mermaid/node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/mermaid/node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/mermaid/node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/mermaid/node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/mermaid/node_modules/micromark/lib/constructs.js","../node_modules/mermaid/node_modules/micromark/lib/parse.js","../node_modules/mermaid/node_modules/micromark/lib/preprocess.js","../node_modules/mermaid/node_modules/micromark-util-decode-string/index.js","../node_modules/mermaid/node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/mermaid/node_modules/micromark/lib/postprocess.js","../node_modules/mermaid/dist/createText-3b1f58a4.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | void}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","import { l as log, L as decodeEntities } from \"./mermaid-768dc893.js\";\nimport { fromMarkdown } from \"mdast-util-from-markdown\";\nimport { dedent } from \"ts-dedent\";\nfunction preprocessMarkdown(markdown) {\n  const withoutMultipleNewlines = markdown.replace(/\\n{2,}/g, \"\\n\");\n  const withoutExtraSpaces = dedent(withoutMultipleNewlines);\n  return withoutExtraSpaces;\n}\nfunction markdownToLines(markdown) {\n  const preprocessedMarkdown = preprocessMarkdown(markdown);\n  const { children } = fromMarkdown(preprocessedMarkdown);\n  const lines = [[]];\n  let currentLine = 0;\n  function processNode(node, parentType = \"normal\") {\n    if (node.type === \"text\") {\n      const textLines = node.value.split(\"\\n\");\n      textLines.forEach((textLine, index) => {\n        if (index !== 0) {\n          currentLine++;\n          lines.push([]);\n        }\n        textLine.split(\" \").forEach((word) => {\n          if (word) {\n            lines[currentLine].push({ content: word, type: parentType });\n          }\n        });\n      });\n    } else if (node.type === \"strong\" || node.type === \"emphasis\") {\n      node.children.forEach((contentNode) => {\n        processNode(contentNode, node.type);\n      });\n    }\n  }\n  children.forEach((treeNode) => {\n    if (treeNode.type === \"paragraph\") {\n      treeNode.children.forEach((contentNode) => {\n        processNode(contentNode);\n      });\n    }\n  });\n  return lines;\n}\nfunction markdownToHTML(markdown) {\n  const { children } = fromMarkdown(markdown);\n  function output(node) {\n    if (node.type === \"text\") {\n      return node.value.replace(/\\n/g, \"<br/>\");\n    } else if (node.type === \"strong\") {\n      return `<strong>${node.children.map(output).join(\"\")}</strong>`;\n    } else if (node.type === \"emphasis\") {\n      return `<em>${node.children.map(output).join(\"\")}</em>`;\n    } else if (node.type === \"paragraph\") {\n      return `<p>${node.children.map(output).join(\"\")}</p>`;\n    }\n    return `Unsupported markdown: ${node.type}`;\n  }\n  return children.map(output).join(\"\");\n}\nfunction splitTextToChars(text) {\n  if (Intl.Segmenter) {\n    return [...new Intl.Segmenter().segment(text)].map((s) => s.segment);\n  }\n  return [...text];\n}\nfunction splitWordToFitWidth(checkFit, word) {\n  const characters = splitTextToChars(word.content);\n  return splitWordToFitWidthRecursion(checkFit, [], characters, word.type);\n}\nfunction splitWordToFitWidthRecursion(checkFit, usedChars, remainingChars, type) {\n  if (remainingChars.length === 0) {\n    return [\n      { content: usedChars.join(\"\"), type },\n      { content: \"\", type }\n    ];\n  }\n  const [nextChar, ...rest] = remainingChars;\n  const newWord = [...usedChars, nextChar];\n  if (checkFit([{ content: newWord.join(\"\"), type }])) {\n    return splitWordToFitWidthRecursion(checkFit, newWord, rest, type);\n  }\n  if (usedChars.length === 0 && nextChar) {\n    usedChars.push(nextChar);\n    remainingChars.shift();\n  }\n  return [\n    { content: usedChars.join(\"\"), type },\n    { content: remainingChars.join(\"\"), type }\n  ];\n}\nfunction splitLineToFitWidth(line, checkFit) {\n  if (line.some(({ content }) => content.includes(\"\\n\"))) {\n    throw new Error(\"splitLineToFitWidth does not support newlines in the line\");\n  }\n  return splitLineToFitWidthRecursion(line, checkFit);\n}\nfunction splitLineToFitWidthRecursion(words, checkFit, lines = [], newLine = []) {\n  if (words.length === 0) {\n    if (newLine.length > 0) {\n      lines.push(newLine);\n    }\n    return lines.length > 0 ? lines : [];\n  }\n  let joiner = \"\";\n  if (words[0].content === \" \") {\n    joiner = \" \";\n    words.shift();\n  }\n  const nextWord = words.shift() ?? { content: \" \", type: \"normal\" };\n  const lineWithNextWord = [...newLine];\n  if (joiner !== \"\") {\n    lineWithNextWord.push({ content: joiner, type: \"normal\" });\n  }\n  lineWithNextWord.push(nextWord);\n  if (checkFit(lineWithNextWord)) {\n    return splitLineToFitWidthRecursion(words, checkFit, lines, lineWithNextWord);\n  }\n  if (newLine.length > 0) {\n    lines.push(newLine);\n    words.unshift(nextWord);\n  } else if (nextWord.content) {\n    const [line, rest] = splitWordToFitWidth(checkFit, nextWord);\n    lines.push([line]);\n    if (rest.content) {\n      words.unshift(rest);\n    }\n  }\n  return splitLineToFitWidthRecursion(words, checkFit, lines);\n}\nfunction applyStyle(dom, styleFn) {\n  if (styleFn) {\n    dom.attr(\"style\", styleFn);\n  }\n}\nfunction addHtmlSpan(element, node, width, classes, addBackground = false) {\n  const fo = element.append(\"foreignObject\");\n  const div = fo.append(\"xhtml:div\");\n  const label = node.label;\n  const labelClass = node.isNode ? \"nodeLabel\" : \"edgeLabel\";\n  div.html(\n    `\n    <span class=\"${labelClass} ${classes}\" ` + (node.labelStyle ? 'style=\"' + node.labelStyle + '\"' : \"\") + \">\" + label + \"</span>\"\n  );\n  applyStyle(div, node.labelStyle);\n  div.style(\"display\", \"table-cell\");\n  div.style(\"white-space\", \"nowrap\");\n  div.style(\"max-width\", width + \"px\");\n  div.attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\");\n  if (addBackground) {\n    div.attr(\"class\", \"labelBkg\");\n  }\n  let bbox = div.node().getBoundingClientRect();\n  if (bbox.width === width) {\n    div.style(\"display\", \"table\");\n    div.style(\"white-space\", \"break-spaces\");\n    div.style(\"width\", width + \"px\");\n    bbox = div.node().getBoundingClientRect();\n  }\n  fo.style(\"width\", bbox.width);\n  fo.style(\"height\", bbox.height);\n  return fo.node();\n}\nfunction createTspan(textElement, lineIndex, lineHeight) {\n  return textElement.append(\"tspan\").attr(\"class\", \"text-outer-tspan\").attr(\"x\", 0).attr(\"y\", lineIndex * lineHeight - 0.1 + \"em\").attr(\"dy\", lineHeight + \"em\");\n}\nfunction computeWidthOfText(parentNode, lineHeight, line) {\n  const testElement = parentNode.append(\"text\");\n  const testSpan = createTspan(testElement, 1, lineHeight);\n  updateTextContentAndStyles(testSpan, line);\n  const textLength = testSpan.node().getComputedTextLength();\n  testElement.remove();\n  return textLength;\n}\nfunction createFormattedText(width, g, structuredText, addBackground = false) {\n  const lineHeight = 1.1;\n  const labelGroup = g.append(\"g\");\n  const bkg = labelGroup.insert(\"rect\").attr(\"class\", \"background\");\n  const textElement = labelGroup.append(\"text\").attr(\"y\", \"-10.1\");\n  let lineIndex = 0;\n  for (const line of structuredText) {\n    const checkWidth = (line2) => computeWidthOfText(labelGroup, lineHeight, line2) <= width;\n    const linesUnderWidth = checkWidth(line) ? [line] : splitLineToFitWidth(line, checkWidth);\n    for (const preparedLine of linesUnderWidth) {\n      const tspan = createTspan(textElement, lineIndex, lineHeight);\n      updateTextContentAndStyles(tspan, preparedLine);\n      lineIndex++;\n    }\n  }\n  if (addBackground) {\n    const bbox = textElement.node().getBBox();\n    const padding = 2;\n    bkg.attr(\"x\", -padding).attr(\"y\", -padding).attr(\"width\", bbox.width + 2 * padding).attr(\"height\", bbox.height + 2 * padding);\n    return labelGroup.node();\n  } else {\n    return textElement.node();\n  }\n}\nfunction updateTextContentAndStyles(tspan, wrappedLine) {\n  tspan.text(\"\");\n  wrappedLine.forEach((word, index) => {\n    const innerTspan = tspan.append(\"tspan\").attr(\"font-style\", word.type === \"emphasis\" ? \"italic\" : \"normal\").attr(\"class\", \"text-inner-tspan\").attr(\"font-weight\", word.type === \"strong\" ? \"bold\" : \"normal\");\n    if (index === 0) {\n      innerTspan.text(word.content);\n    } else {\n      innerTspan.text(\" \" + word.content);\n    }\n  });\n}\nconst createText = (el, text = \"\", {\n  style = \"\",\n  isTitle = false,\n  classes = \"\",\n  useHtmlLabels = true,\n  isNode = true,\n  width = 200,\n  addSvgBackground = false\n} = {}) => {\n  log.info(\"createText\", text, style, isTitle, classes, useHtmlLabels, isNode, addSvgBackground);\n  if (useHtmlLabels) {\n    const htmlText = markdownToHTML(text);\n    const node = {\n      isNode,\n      label: decodeEntities(htmlText).replace(\n        /fa[blrs]?:fa-[\\w-]+/g,\n        (s) => `<i class='${s.replace(\":\", \" \")}'></i>`\n      ),\n      labelStyle: style.replace(\"fill:\", \"color:\")\n    };\n    const vertexNode = addHtmlSpan(el, node, width, classes, addSvgBackground);\n    return vertexNode;\n  } else {\n    const structuredText = markdownToLines(text);\n    const svgLabel = createFormattedText(width, el, structuredText, addSvgBackground);\n    return svgLabel;\n  }\n};\nexport {\n  createText as c\n};\n"],"names":["emptyOptions","one","value","includeImageAlt","includeHtml","Boolean","node","type","alt","all","children","Array","isArray","values","result","index","length","join","splice","list","start","remove","items","parameters","end","chunkStart","from","unshift","apply","_toConsumableArray","slice","push","hasOwnProperty","syntaxExtension","extension","hook","left","call","undefined","right","code","constructs","existing","before","add","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","test","String","fromCharCode","factorySpace","effects","ok","max","limit","Number","POSITIVE_INFINITY","size","enter","prefix","consume","exit","content","tokenize","previous","contentStart","attempt","this","parser","contentInitial","lineStart","token","contentType","next","data","document","childFlow","childToken","lineStartOffset","self","stack","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","point","indexBeforeExits","events","indexBeforeFlow","exitContainers","Object","assign","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","line","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","entry","nok","disable","null","includes","blankLine","after","partial","chunkInside","contentEnd","continuationConstruct","contentContinue","resolve","subtokenize","prefixed","tail","sliceSerialize","initial","flowInitial","afterConstruct","resolver","resolveAll","createResolver","string","initializeFactory","text","field","notText","atBreak","resolveAllLineSuffixes","extraResolver","context","eventIndex","chunks","bufferIndex","tabs","chunk","charCodeAt","column","_index","_bufferIndex","called","createTokenizer","initialize","columnStart","resolveAllConstructs","accountForPotentialSkip","fields","pop","constructFactory","construct","info","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","state","view","startIndex","startBufferIndex","endIndex","endBufferIndex","head","shift","sliceChunks","_point","chunkIndex","go","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","map","def","concat","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","name","create","resolveTo","thematicBreak","marker","sequence","initialSize","kind","_container","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","open","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","normalizeIdentifier","replace","toLowerCase","toUpperCase","definition","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","defined","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","characterReference","numeric","decodeNamedCharacterReference","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","media","group","label","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","classifyCharacter","attention","attentionMarkers","_open","_close","openingSequence","closingSequence","use","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","instruction","tagOpen","declaration","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","between","tailExitIndex","headEnterIndex","_document","_defineProperty","_flowInitial","_flow","_string","_text","resolveText","parse","options","settings","extensions","combineExtensions","defaultConstructs","search","characterEscapeOrReference","decode","$0","$1","$2","hex","decodeNumericCharacterReference","own","fromMarkdown","encoding","config","transforms","canContainEols","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tree","tokenStack","resume","setData","getData","listStack","prepareList","handler","defaultOnError","position","lineIndex","firstBlankLineIndex","containerBalance","listSpread","event","tailIndex","tailEvent","_spread","key","and","errorHandler","onExitError","Error","stringifyPosition","toString","parseInt","lang","title","url","depth","referenceType","ancestor","decodeString","fragment","ordered","spread","checked","compiler","postprocess","atCarriageReturn","match","startPosition","endPosition","lastIndex","exec","Math","ceil","preprocess","d","combined","_combined$key","_combined$key2","markdownToLines","markdown","preprocessedMarkdown","withoutMultipleNewlines","dedent","preprocessMarkdown","lines","currentLine","processNode","parentType","arguments","split","forEach","textLine","word","contentNode","treeNode","splitWordToFitWidth","checkFit","splitWordToFitWidthRecursion","Intl","Segmenter","segment","s","usedChars","remainingChars","_remainingChars","_toArray","nextChar","rest","newWord","splitLineToFitWidth","some","_ref","splitLineToFitWidthRecursion","words","_words$shift","newLine","joiner","nextWord","lineWithNextWord","_splitWordToFitWidth","_splitWordToFitWidth2","_slicedToArray","createTspan","textElement","lineHeight","append","attr","computeWidthOfText","parentNode","testElement","testSpan","updateTextContentAndStyles","textLength","getComputedTextLength","tspan","wrappedLine","innerTspan","createText","el","_ref2","_ref2$style","style","_ref2$isTitle","isTitle","_ref2$classes","classes","_ref2$useHtmlLabels","useHtmlLabels","_ref2$isNode","isNode","_ref2$width","width","_ref2$addSvgBackgroun","addSvgBackground","log","output","vertexNode","element","dom","styleFn","addBackground","fo","div","labelClass","labelStyle","bbox","getBoundingClientRect","height","addHtmlSpan","decodeEntities","svgLabel","g","structuredText","_step","labelGroup","bkg","insert","_iterator","_createForOfIteratorHelper","n","done","_step2","checkWidth","line2","linesUnderWidth","_iterator2","preparedLine","err","e","f","getBBox","createFormattedText"],"sourceRoot":""}